# AUTOGENERATED! DO NOT EDIT! File to edit: 00_core.ipynb (unless otherwise specified).

__all__ = ['read_config', 'StorageClientABC', 'LocalStorageClient', 'AzureStorageClient', 'AwsStorageClient',
           'new_storage_client']

# Cell
from abc import ABC,abstractmethod
from configparser import ConfigParser
from pathlib import Path
import shutil, boto3 as aws, azure.storage.blob as az

# Cell
def read_config(section_name=None,config_name='secrets//settings.ini'):
    config_path=Path(config_name)
    config=ConfigParser()
    config.read(config_path)
    if section_name is None:
        return config
    if section_name not in config:
        raise Exception(f'Error: [{section_name}] section not found in {config_path}')
    return dict(config.items(section_name))

# Cell
class StorageClientABC(ABC):
    "Defines functionality common to all storage clients"

    def __init__(self,storage_name,config_name='secrets//settings.ini'):
        "Create a new storage client using the `storage_name` section of `config_name`"
        self.config=read_config(storage_name,config_name=config_name)

    @abstractmethod
    def ls(self,what):
        "Return a list containing the names of files in either `storage_area` or `local_path`"

    @abstractmethod
    def download(self,filename):
        "Copy `filename` from `storage_area` to `local_path`"

    @abstractmethod
    def upload(self,filename,overwrite=False):
        "Copy `filename` from `local_path` to `storage_area`"

# Cell
class LocalStorageClient(StorageClientABC):
    "Storage client that downloads from and uploads to the local filesystem"

    def _ls(self,p,result,len_path_prefix):
        for _p in p.iterdir():
            if _p.is_dir(): self._ls(_p,result,len_path_prefix)
            else: result.append(str(_p).replace('\\','/')[len_path_prefix:])

    def ls(self,what='storage_area'):
        result,p=[],Path(self.config[what])
        p.mkdir(parents=True,exist_ok=True)
        self._ls(p,result,len(self.config[what])+1)
        sorted(result)
        return result

    def _cp(self,from_key,to_key,filename,overwrite=False):
        src=Path(self.config[from_key])/filename
        dst=Path(self.config[to_key])/filename
        if dst.exists() and not overwrite:
            raise FileExistsError(f'{dst} exists and overwrite=False')
        dst.parent.mkdir(parents=True,exist_ok=True)
        shutil.copy(src,dst)

    def download(self,filename,overwrite=False):
        try: self._cp('storage_area','local_path',filename,overwrite)
        except FileExistsError: pass

    def upload(self,filename,overwrite=False):
        self._cp('local_path','storage_area',filename,overwrite)

# Cell
class AzureStorageClient(StorageClientABC):
    def _client(self):
        if getattr(self,'client') is None:
            service_client=az.BlobServiceClient.from_connection_string(
                self.config['conn_str'],self.config['credential'])
            self.client=service_client.get_container_client(self.config['container'])
        return self.client
    def ls(self): pass
    def download(self,filename): pass
    def upload(self,filename,overwrite=False): pass

# Cell
class AwsStorageClient(StorageClientABC):
    def ls(self): pass
    def download(self,filename): pass
    def upload(self,filename,overwrite=False): pass

# Cell
def new_storage_client(storage_name,config_name='secrets//settings.ini'):
    "Returns a storage client based on the configured `storage_type`"
    config=read_config(storage_name,config_name=config_name)
    storage_type=config['storage_type']
    if storage_type=='local': return LocalStorageClient(storage_name, config_name)
    elif storage_type=='azure': return AzureStorageClient(storage_name, config_name)
    elif storage_type=='aws': return AwsStorageClient(storage_name, config_name)
    else: raise ValueError(f'Unknown storage_type: {storage_type}')